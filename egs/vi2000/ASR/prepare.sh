#!/usr/bin/env bash

# fix segmentation fault reported in https://github.com/k2-fsa/icefall/issues/674
export PROTOCOL_BUFFERS_PYTHON_IMPLEMENTATION=python

set -eou pipefail

nj=15
# run step 0 to step 4 by default
stage=0
stop_stage=4


# We assume dl_dir (download dir) contains the following
# directories and files.
#
#  - $dl_dir/vi2000

dl_dir=$PWD/download

. shared/parse_options.sh || exit 1

# vocab size for sentence piece models.
# It will generate data/lang_bpe_xxx,
# data/lang_bpe_yyy if the array contains xxx, yyy
vocab_sizes=(
  # 5000
  2000
  # 1000
  # 500
)

# All files generated by this script are saved in "data".
# You can safely remove "data" and rerun this script to regenerate it.
mkdir -p data

log() {
  # This function is from espnet
  local fname=${BASH_SOURCE[1]##*/}
  echo -e "$(date '+%Y-%m-%d %H:%M:%S') (${fname}:${BASH_LINENO[0]}:${FUNCNAME[1]}) $*"
}

log "Running prepare.sh"

log "dl_dir: $dl_dir"


if [ $stage -le 1 ] && [ $stop_stage -ge 1 ]; then
  log "Stage 1: Prepare vi2000 manifest"
  # We assume that you have downloaded the vi2000 corpus
  # to $dl_dir/vi2000
  mkdir -p data/manifests
  if [ ! -e data/manifests/.vi2000.done ]; then
    pip install git+https://github.com/yfyeung/lhotse.git@vi2000
    lhotse prepare vi2000 $dl_dir/vi2000/ data/manifests -j $nj
    lhotse prepare vi2000 $dl_dir/vi2000/ data/manifests -j $nj
    touch data/manifests/.vi2000.done
  fi
fi

if [ $stage -le 2 ] && [ $stop_stage -ge 2 ]; then
  log "Stage 2: Preprocess vi2000 manifest"
  if [ ! -e data/fbank/.preprocess_vi2000.done ]; then
    ./local/preprocess_vi2000.py
    touch data/fbank/.preprocess_vi2000.done
  fi
fi

if [ $stage -le 3 ] && [ $stop_stage -ge 3 ]; then
  log "Stage 3: Compute fbank for vi2000"
  mkdir -p data/fbank
  if [ ! -e data/fbank/.vi2000.done ]; then
    ./local/compute_fbank_vi2000.py
    touch data/fbank/.vi2000.done
  fi
fi

if [ $stage -le 4 ] && [ $stop_stage -ge 4 ]; then
  log "Stage 4: Prepare BPE based lang"

  for vocab_size in ${vocab_sizes[@]}; do
    lang_dir=data/lang_bpe_${vocab_size}
    mkdir -p $lang_dir
 
    if [ ! -f $lang_dir/text ]; then
      log "Generate text for BPE training"
      gunzip -c data/fbank/vi2000_cuts_train.jsonl.gz \
        | jq -r .supervisions[0].text \
        > $lang_dir/text
    fi
 
    if [ ! -f $lang_dir/bpe.model ]; then
      ./local/train_bpe_model.py \
        --lang-dir $lang_dir \
        --vocab-size $vocab_size \
        --transcript $lang_dir/text
    fi
  done
fi