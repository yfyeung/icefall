#!/usr/bin/env bash

# fix segmentation fault reported in https://github.com/k2-fsa/icefall/issues/674
export PROTOCOL_BUFFERS_PYTHON_IMPLEMENTATION=python

set -eou pipefail

nj=32
stage=0
stop_stage=100

# We assume dl_dir (download dir) contains the following
# directories and files. If not, they will be downloaded
# by this script automatically.
#
#  - $dl_dir/GigaSpeech3/kr
#     - dev
#     - test
#     - train

dl_dir=$PWD/download

. shared/parse_options.sh || exit 1

# vocab size for sentence piece models.
# It will generate data/lang_bpe_xxx,
# data/lang_bpe_yyy if the array contains xxx, yyy
vocab_sizes=(
  2000
)

# All files generated by this script are saved in "data".
# You can safely remove "data" and rerun this script to regenerate it.
mkdir -p data

log() {
  # This function is from espnet
  local fname=${BASH_SOURCE[1]##*/}
  echo -e "$(date '+%Y-%m-%d %H:%M:%S') (${fname}:${BASH_LINENO[0]}:${FUNCNAME[1]}) $*"
}

log "Running prepare.sh"

log "dl_dir: $dl_dir"


if [ $stage -le 1 ] && [ $stop_stage -ge 1 ]; then
  log "Stage 1: Prepare GigaSpeech3 manifest"
  # We assume that you have downloaded the GigaSpeech3 corpus
  # to $dl_dir/GigaSpeech3
  mkdir -p data/manifests
  if [ ! -e data/manifests/.gigaspeech3.done ]; then
    lhotse prepare GigaSpeech3 -j $nj $dl_dir/GigaSpeech3 data/manifests
    touch data/manifests/.gigaspeech3.done
  fi
fi

if [ $stage -le 2 ] && [ $stop_stage -ge 2 ]; then
  log "State 2: Preprocess GigaSpeech3 manifest"
  if [ ! -f data/fbank/.preprocess_complete ]; then
    python3 ./local/preprocess_gigaspeech3.py
    touch data/fbank/.preprocess_complete
  fi
fi

if [ $stage -le 3 ] && [ $stop_stage -ge 3 ]; then
  log "Stage 3: Compute features for DEV and TEST subsets of GigaSpeech3."
  mkdir -p data/fbank
  if [ ! -e data/fbank/.gigaspeech3.done ]; then
    ./local/compute_fbank_gigaspeech3.py
    touch data/fbank/.gigaspeech3.done
  fi
fi

if [ $stage -le 5 ] && [ $stop_stage -ge 5 ]; then
  log "Stage 4: Split TRAIN subset into pieces"
  num_per_split=8000
  split_dir=data/fbank/ytnnews24-0_split
  if [ ! -f $split_dir/.split_completed ]; then
    lhotse split-lazy ./data/fbank/gigaspeech3_cuts_ytnnews24-0_raw.jsonl.gz $split_dir $num_per_split
    touch $split_dir/.split_completed
  fi
fi

if [ $stage -le 5 ] && [ $stop_stage -ge 5 ]; then
  log "Stage 5: Compute features for TRAIN subset"
  num_splits=$(find data/fbank/ytnnews24-0_split -name "gigaspeech3_cuts_ytnnews24-0_raw.*.jsonl.gz" | wc -l)
  python3 ./local/compute_fbank_gigaspeech3_splits.py \
    --subset "ytnnews24-0" \
    --num-workers 20 \
    --batch-duration 600 \
    --num-splits $num_splits
fi

if [ $stage -le 6 ] && [ $stop_stage -ge 6 ]; then
  log "Stage 6: Combine features for TRAIN subset"
  if [ ! -f data/fbank/gigaspeech3_cuts_ytnnews24-0.jsonl.gz ]; then
    pieces=$(find data/fbank/ytnnews24-0_split -name "gigaspeech3_cuts_ytnnews24-0.*.jsonl.gz")
    lhotse combine $pieces data/fbank/gigaspeech3_cuts_ytnnews24-0.jsonl.gz
  fi
fi

if [ $stage -le 7 ] && [ $stop_stage -ge 7 ]; then
  log "Stage 7: Prepare BPE based lang"

  for vocab_size in ${vocab_sizes[@]}; do
    lang_dir=data/lang_bpe_${vocab_size}
    mkdir -p $lang_dir

    if [ ! -f $lang_dir/transcript_words.txt ]; then
      gunzip -c "data/fbank/gigaspeech3_cuts_ytnnews24-0.jsonl.gz" \
        | jq '.text' \
        | sed 's/"//g' \
      > $lang_dir/transcript_words.txt

    if [ ! -f $lang_dir/bpe.model ]; then
      ./local/train_bpe_model.py \
        --lang-dir $lang_dir \
        --vocab-size $vocab_size \
        --transcript $lang_dir/transcript_words.txt
    fi
  done
fi